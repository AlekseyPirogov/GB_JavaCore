package Lesson_1_Object.Ex1_ExampleCode;

// С помощью ключевого слова interface можно полностью абстрагировать интерфейс класса от его реализации,
// то есть указать, что именно должен выполнять класс, но не как это делать. Синтаксически интерфейсы аналогичны
// классам, но не содержат переменные экземпляра, а объявления их методов, как правило, не содержат тело метода.

// Каждый интерфейс может быть реализован любым количеством классов. Кроме того, один класс может реализовать
// любое количество интерфейсов. Чтобы реализовать интерфейс, в классе должен быть переопределён весь набор методов
// интерфейса.

public interface _02_ExampleInterface {

    // Методы интерфейса имеют модификаторы public и abstract, даже если это не указано явно. Каждый класс,
    // реализующий интерфейс, должен переопределить (реализовать) все его методы. В интерфейсах могут быть
    // объявлены поля, они неявно будут иметь модификаторы public static final, и обязательной должный быть
    // инициализированы.

    int exampleField = 0;

    void exampleInterface(int var1);
    void function();

    // Интерфейс может быть реализован в одном или нескольких классах, для этого в объявлении класса необходимо
    // добавить ключевое слово implements, а затем переопределить методы интерфейса:

    /*
    public class User extends Human implements ExampleInterface {

        @Override
        public void exampleInterface(int var1) {

        }

        @Override
        public void function() {

        }
    }*/
}
